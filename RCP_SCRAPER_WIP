import requests
import json
import re
from bs4 import BeautifulSoup #data scraper package
import numpy
import pandas as pd
from itertools import zip_longest
#url loading and get



def get_state_data(url, state):

    page = requests.get(url)

    #check and return code
    if page.status_code == 200:
        url_content = page.text
        print("Success")
        
        soup = BeautifulSoup(page.content, "html.parser") #EVERYTHING

        script_tags = soup.find_all('script')

        counter = 0 #this checks the line with the JS that has ALL THE DATA in it
        for script in script_tags:
            if script.string and 'finalData' in script.string:
                counter += 1
                #print(script.string)
                str = script.string
                break
        #shaving the values into readable json for json.loads
        str2 = str.split('self.__next_f.push(')
        str3 = str2[1][:-1]
        jsonx = json.loads(str3)
        #print(json[1]) #so now its in a big LIST
        json_str = jsonx[1] #chooses the 2nd item in the list indexed as 1
        #print(json_str)

        #Regex Search Patterns 
        pollster_pattern = r'"pollster":\s*"([^"]*)"'
        date_pattern = r'"date":\s*"([^"]*)"'
        sample_size_pattern = r'"sampleSize":\s*"([^"]*)"'
        margin_error_pattern = r'"marginError":\s*"([^"]*)"'
        #dvalue_pattern = r'"candidate":\[{"name":"Biden","affiliation":"Democrat","value":"([^"]*)"' or r'"candidate":\[{[^}]*},{"name":"Biden","affiliation":"Democrat","value":"([^"]*)"'
        #rvalue_pattern = r'"candidate":\[{[^}]*},{"name":"Trump","affiliation":"Republican","value":"([^"]*)"' or r'"candidate":\[{"name":"Trump","affiliation":"Republican","value":"([^"]*)"'
        link_pattern = r'"link":\s*"([^"]*)"'

        #or symbols for difference of values between sites
        dvalue_pattern1 = r'"candidate":\[{"name":"([^"]*?)","affiliation":"Democrat","value":"([^"]*)"'
        dvalue_pattern2 = r'"candidate":\[{[^}]*},{"name":"([^"]*?)","affiliation":"Democrat","value":"([^"]*)"'

        rvalue_pattern1 = r'"candidate":\[{[^}]*},{"name":"([^"]*?)","affiliation":"Republican","value":"([^"]*)"'
        rvalue_pattern2 = r'"candidate":\[{"name":"([^"]*?)","affiliation":"Republican","value":"([^"]*)"'

        #race_pattern = r'"https://www.realclearpolling.com/polls/([^"]*?)"'
        #race_value = re.findall(race_pattern, url)


        dvalue_data = re.findall(dvalue_pattern1, json_str) or re.findall(dvalue_pattern2, json_str)
        rvalue_data = re.findall(rvalue_pattern1, json_str) or re.findall(rvalue_pattern2, json_str)

        #puts the data into a list
        pollster_data = re.findall(pollster_pattern, json_str)
        date_data = re.findall(date_pattern, json_str)
        sample_size_data = re.findall(sample_size_pattern, json_str)
        margin_error_data = re.findall(margin_error_pattern, json_str)
        #dvalue_data = re.findall(dvalue_pattern, json_str)
        #rvalue_data = re.findall(rvalue_pattern, json_str)
        link_data = re.findall(link_pattern, json_str)

        #dictionary appending
        data_rows = []
        for row in zip_longest(pollster_data, date_data, sample_size_data, margin_error_data, dvalue_data, rvalue_data, link_data, fillvalue=None):
            data_rows.append({
                
                "pollster": row[0],
                "date": row[1],
                "sampleSize": row[2],
                "marginError": row[3],
                "dvalue": row[4],
                "rvalue": row[5],
                #"state": state,
                #"race": race_value
                


            })
        #df = pd.DataFrame(data_rows)
        #df_revised = df.drop_duplicates()
        #df_revised2 = df_revised.dropna(subset=['pollster'])
        return data_rows
    else:
        print("Failed to retrieve. Status Code was", page.status_code)
        return[]

        


state_urls = {
    "year":{
        
        "2014":{

            "Presidential":{

                "states":{
                    

                }
            }
        },
        "2020":{
            "Presidential":{
                
                "states":{

                    "Alabama": "https://www.realclearpolling.com/polls/president/general/2020/alabama/trump-vs-biden#polls",
                    "Alaska": "https://www.realclearpolling.com/polls/president/general/2020/alaska/trump-vs-biden#polls",
                    "Arizona": "https://www.realclearpolling.com/polls/president/general/2020/arizona/trump-vs-biden#polls",
                    "Arkansas": "https://www.realclearpolling.com/polls/president/general/2020/arkansas/trump-vs-biden#polls",
                    "California": "https://www.realclearpolling.com/polls/president/general/2020/california/trump-vs-biden#polls",
                    "Colorado": "https://www.realclearpolling.com/polls/president/general/2020/colorado/trump-vs-biden#polls",
                    "Connecticut": "https://www.realclearpolling.com/polls/president/general/2020/connecticut/trump-vs-biden#polls",
                    "Delaware": "https://www.realclearpolling.com/polls/president/general/2020/delaware/trump-vs-biden#polls",
                    "Florida": "https://www.realclearpolling.com/polls/president/general/2020/florida/trump-vs-biden#polls",
                    "Georgia": "https://www.realclearpolling.com/polls/president/general/2020/georgia/trump-vs-biden#polls",
                    "Hawaii": "https://www.realclearpolling.com/polls/president/general/2020/hawaii/trump-vs-biden#polls",
                    #"Idaho": "",  # Missing URL
                    #"Illinois": "https://www.realclearpolitics.com/epolls/2020/president/il/illinois_trump_vs_biden-7194.html",
                    "Indiana": "https://www.realclearpolling.com/polls/president/general/2020/indiana/trump-vs-biden#polls",
                    "Iowa": "https://www.realclearpolling.com/polls/president/general/2020/iowa/trump-vs-biden#polls",
                    "Kansas": "https://www.realclearpolling.com/polls/president/general/2020/kansas/trump-vs-biden#polls",
                    "Kentucky": "https://www.realclearpolling.com/polls/president/general/2020/kentucky/trump-vs-biden#polls",
                    "Louisiana": "https://www.realclearpolling.com/polls/president/general/2020/louisiana/trump-vs-biden#polls",
                    "Maine": "https://www.realclearpolling.com/polls/president/general/maine/2020/trump-vs-biden#polls",
                    "Maine CD1": "https://www.realclearpolling.com/polls/president/general/2020/maine-cd1/trump-vs-biden#polls",
                    "Maine CD2": "https://www.realclearpolling.com/polls/president/general/2020/maine/cd2-trump-vs-biden#polls",
                    "Maryland": "https://www.realclearpolling.com/polls/president/general/2020/maryland/trump-vs-biden#polls",
                    "Massachusetts": "https://www.realclearpolling.com/polls/president/general/2020/massachusetts/trump-vs-biden#polls",
                    "Michigan": "https://www.realclearpolling.com/polls/president/general/2020/michigan/trump-vs-biden#polls",
                    "Minnesota": "https://www.realclearpolling.com/polls/president/general/2020/minnesota/trump-vs-biden#polls",
                    "Mississippi": "https://www.realclearpolling.com/polls/president/general/2020/mississippi/trump-vs-biden#polls",
                    "Missouri": "https://www.realclearpolling.com/polls/president/general/2020/missouri/trump-vs-biden#polls",
                    "Montana": "https://www.realclearpolling.com/polls/president/general/2020/montana/trump-vs-biden#polls",
                    "Nebraska CD2": "https://www.realclearpolling.com/polls/president/general/2020/nebraska-cd2/trump-vs-biden#polls",
                    "Nevada": "https://www.realclearpolling.com/polls/president/general/2020/nevada/trump-vs-biden#polls",
                    "New Hampshire": "https://www.realclearpolling.com/polls/president/general/2020/new-hampshire/trump-vs-biden#polls",
                    "New Jersey": "https://www.realclearpolling.com/polls/president/general/2020/new-jersey/trump-vs-biden#polls",
                    "New Mexico": "https://www.realclearpolling.com/polls/president/general/2020/new-mexico/trump-vs-biden#polls",
                    "New York": "https://www.realclearpolling.com/polls/president/general/2020/new-york/trump-vs-biden#polls",
                    "North Carolina": "https://www.realclearpolling.com/polls/president/general/2020/north-carolina/trump-vs-biden#polls",
                    #"North Dakota": "",  # Missing URL
                    "Ohio": "https://www.realclearpolling.com/polls/president/general/2020/ohio/trump-vs-biden#polls",
                    "Oklahoma": "https://www.realclearpolling.com/polls/president/general/2020/oklahoma/trump-vs-biden#polls",
                    "Oregon": "https://www.realclearpolling.com/polls/president/general/2020/oregon/trump-vs-biden#polls",
                    "Pennsylvania": "https://www.realclearpolling.com/polls/president/general/2020/pennsylvania/trump-vs-biden#polls",
                    #"Rhode Island": "",  # Missing URL
                    "South Carolina": "https://www.realclearpolling.com/polls/president/general/2020/south-carolina/trump-vs-biden#polls",
                    "South Dakota": "https://www.realclearpolling.com/polls/president/general/2020/south-dakota/trump-vs-biden#polls",
                    "Tennessee": "https://www.realclearpolling.com/polls/president/general/2020/tennessee/trump-vs-biden#polls",
                    "Texas": "https://www.realclearpolling.com/polls/president/general/2020/texas/trump-vs-biden#polls",
                    "Utah": "https://www.realclearpolling.com/polls/president/general/2020/utah/trump-vs-biden#polls",
                    "Vermont": "https://www.realclearpolling.com/polls/president/general/2020/vermont/trump-vs-biden#polls",
                    "Virginia": "https://www.realclearpolling.com/polls/president/general/2020/virginia/trump-vs-biden#polls",
                    "Washington": "https://www.realclearpolling.com/polls/president/general/2020/washington/trump-vs-biden#polls",
                    "West Virginia": "https://www.realclearpolling.com/polls/president/general/2020/west-virginia/trump-vs-biden#polls",
                    "Wisconsin": "https://www.realclearpolling.com/polls/president/general/2020/wisconsin/trump-vs-biden#polls",
                    "Wyoming": "https://www.realclearpolling.com/polls/president/general/2020/wyoming/trump-vs-biden#polls",

                    "National": "https://www.realclearpolling.com/polls/president/general/2024/trump-vs-biden#polls",

                    "NC_Gov_2024": "https://www.realclearpolling.com/polls/governor/general/2024/north-carolina/robinson-vs-stein"
                }           
            },
            
            "Governor":{
                
            }
        },
        "2022":{

            "Governor":{
                
                
            }
            
        }
    }
    
}






all_state_dataframe = []

for state, url in state_urls.items():
    state_df = get_state_data(url, state)
    df = pd.DataFrame(state_df)
    df_revised = df.drop_duplicates()
    df_revised2 = df_revised.dropna(subset=['pollster'])
    all_state_dataframe.append(df_revised2)
    #all_state_dataframe.extend(df_revised2)
    
#for governor, url in governor_urls.items():
    #state_df = get_state_data(url, state)
    #df = pd.DataFrame(state_df)
    #df_revised = df.drop_duplicates()
    #df_revised2 = df_revised.dropna(subset=['pollster'])
    #all_state_dataframe.append(df_revised2)


all_state_df = pd.concat(all_state_dataframe, ignore_index=True)
#all_state_df.to_csv('ALLSTATEDATA.csv', index=False)

print(all_state_df.to_string(index=False))


#df = pd.DataFrame()

#df_revised = df.drop_duplicates()

#df_revised2 = df_revised.dropna(subset=['pollster'])

#print(df_revised2)

#print(df_revised2.to_string(index=False))

#print(df_revised2.shape)
#x = print(df_revised2.reset_index())
#print(x.shape)

#df_final = df_revised2.to_csv('out.csv', index=False)

